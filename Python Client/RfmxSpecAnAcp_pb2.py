# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: RfmxSpecAnAcp.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
import RfmxSpecAnAcpCompCarrier_pb2 as RfmxSpecAnAcpCompCarrier__pb2
import RfmxSpecAnAcpOffsets_pb2 as RfmxSpecAnAcpOffsets__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x13RfmxSpecAnAcp.proto\x12\x10multi_site_instr\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1eRfmxSpecAnAcpCompCarrier.proto\x1a\x1aRfmxSpecAnAcpOffsets.proto\"\x85\x12\n\tSpecAnAcp\x12\x34\n\x10\x41llTracesEnabled\x18\x01 \x01(\x0b\x32\x1a.google.protobuf.BoolValue\x12Y\n\x17\x41mplitudeCorrectionType\x18\x02 \x01(\x0e\x32\x38.multi_site_instr.RFmxSpecAnMXAcpAmplitudeCorrectionType\x12\x33\n\x0e\x41veragingCount\x18\x03 \x01(\x0b\x32\x1b.google.protobuf.Int32Value\x12K\n\x10\x41veragingEnabled\x18\x04 \x01(\x0e\x32\x31.multi_site_instr.RFmxSpecAnMXAcpAveragingEnabled\x12\x45\n\rAveragingType\x18\x05 \x01(\x0e\x32..multi_site_instr.RFmxSpecAnMXAcpAveragingType\x12<\n\x16\x46\x61rIFOutputPowerOffset\x18\x06 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x30\n\nFftOverlap\x18\x07 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12G\n\x0e\x46\x66tOverlapMode\x18\x08 \x01(\x0e\x32/.multi_site_instr.RFmxSpecAnMXAcpFftOverlapMode\x12\x30\n\nFftPadding\x18\t \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12=\n\tFftWindow\x18\n \x01(\x0e\x32*.multi_site_instr.RFmxSpecAnMXAcpFftWindow\x12Y\n\x17IFOutputPowerOffsetAuto\x18\x0b \x01(\x0e\x32\x38.multi_site_instr.RFmxSpecAnMXAcpIFOutputPowerOffsetAuto\x12\x36\n\x12MeasurementEnabled\x18\x0c \x01(\x0b\x32\x1a.google.protobuf.BoolValue\x12M\n\x11MeasurementMethod\x18\r \x01(\x0e\x32\x32.multi_site_instr.RFmxSpecAnMXAcpMeasurementMethod\x12I\n\x0fMeasurementMode\x18\x0e \x01(\x0e\x32\x30.multi_site_instr.RFmxSpecAnMXAcpMeasurementMode\x12=\n\x17NearIFOutputPowerOffset\x18\x0f \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x65\n\x1dNoiseCalibrationAveragingAuto\x18\x10 \x01(\x0e\x32>.multi_site_instr.RFmxSpecAnMXAcpNoiseCalibrationAveragingAuto\x12\x43\n\x1eNoiseCalibrationAveragingCount\x18\x11 \x01(\x0b\x32\x1b.google.protobuf.Int32Value\x12S\n\x14NoiseCalibrationMode\x18\x12 \x01(\x0e\x32\x35.multi_site_instr.RFmxSpecAnMXAcpNoiseCalibrationMode\x12[\n\x18NoiseCompensationEnabled\x18\x13 \x01(\x0e\x32\x39.multi_site_instr.RFmxSpecAnMXAcpNoiseCompensationEnabled\x12U\n\x15NoiseCompensationType\x18\x14 \x01(\x0e\x32\x36.multi_site_instr.RFmxSpecAnMXAcpNoiseCompensationType\x12<\n\x17NumberOfAnalysisThreads\x18\x15 \x01(\x0b\x32\x1b.google.protobuf.Int32Value\x12\x35\n\x10NumberOfCarriers\x18\x16 \x01(\x0b\x32\x1b.google.protobuf.Int32Value\x12\x34\n\x0fNumberOfOffsets\x18\x17 \x01(\x0b\x32\x1b.google.protobuf.Int32Value\x12?\n\nPowerUnits\x18\x18 \x01(\x0e\x32+.multi_site_instr.RFmxSpecAnMXAcpPowerUnits\x12Q\n\x16RbwFilterAutoBandwidth\x18\x19 \x01(\x0e\x32\x31.multi_site_instr.RFmxSpecAnMXAcpRbwAutoBandwidth\x12\x38\n\x12RbwFilterBandwidth\x18\x1a \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x63\n\x1cRbwFilterBandwidthDefinition\x18\x1b \x01(\x0e\x32=.multi_site_instr.RFmxSpecAnMXAcpRbwFilterBandwidthDefinition\x12\x45\n\rRbwFilterType\x18\x1c \x01(\x0e\x32..multi_site_instr.RFmxSpecAnMXAcpRbwFilterType\x12\x36\n\x11SequentialFftSize\x18\x1d \x01(\x0b\x32\x1b.google.protobuf.Int32Value\x12\x45\n\rSweepTimeAuto\x18\x1e \x01(\x0e\x32..multi_site_instr.RFmxSpecAnMXAcpSweepTimeAuto\x12\x37\n\x11SweepTimeInterval\x18\x1f \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12>\n\x0e\x41\x63pCompCarrier\x18  \x03(\x0b\x32&.multi_site_instr.SpecAnAcpCompCarrier\x12\x36\n\nAcpOffsets\x18! \x03(\x0b\x32\".multi_site_instr.SpecAnAcpOffsets*v\n&RFmxSpecAnMXAcpAmplitudeCorrectionType\x12\x1d\n\x19RFCenterFrequency_010jfgv\x10\x00\x12 \n\x1cSpectrumFrequencyBin_010vjbl\x10\x01\x12\x0b\n\x06zmfeca\x10\xf4\x03*S\n\x1fRFmxSpecAnMXAcpAveragingEnabled\x12\x11\n\rFalse_010otid\x10\x00\x12\x10\n\x0cTrue_010silr\x10\x01\x12\x0b\n\x06\x62\x64\x66\x61vm\x10\xf4\x03*\x8b\x01\n\x1cRFmxSpecAnMXAcpAveragingType\x12\x0f\n\x0bRms_010plkc\x10\x00\x12\x0f\n\x0bLog_010zmsw\x10\x01\x12\x12\n\x0eScalar_010tqqf\x10\x02\x12\x13\n\x0fMaximum_010onmn\x10\x03\x12\x13\n\x0fMinimum_010cogh\x10\x04\x12\x0b\n\x06wqgbfk\x10\xf4\x03*r\n\x1dRFmxSpecAnMXAcpFftOverlapMode\x12\x14\n\x10\x44isabled_010jsec\x10\x00\x12\x15\n\x11\x41utomatic_010qvnp\x10\x01\x12\x17\n\x13UserDefined_010wncd\x10\x02\x12\x0b\n\x06\x65qhszr\x10\xf4\x03*\xda\x01\n\x18RFmxSpecAnMXAcpFftWindow\x12\x10\n\x0cNone_010nnty\x10\x00\x12\x13\n\x0f\x46latTop_010fobq\x10\x01\x12\x13\n\x0fHanning_010tnqy\x10\x02\x12\x13\n\x0fHamming_010fjwp\x10\x03\x12\x14\n\x10Gaussian_010dzsq\x10\x04\x12\x14\n\x10\x42lackman_010avrz\x10\x05\x12\x1a\n\x16\x42lackmanHarris_010qylz\x10\x06\x12\x18\n\x14KaiserBessel_010jqae\x10\x07\x12\x0b\n\x06qoosql\x10\xf4\x03*Z\n&RFmxSpecAnMXAcpIFOutputPowerOffsetAuto\x12\x11\n\rFalse_010npba\x10\x00\x12\x10\n\x0cTrue_010bazx\x10\x01\x12\x0b\n\x06itgpnh\x10\xf4\x03*x\n RFmxSpecAnMXAcpMeasurementMethod\x12\x12\n\x0eNormal_010zjrr\x10\x00\x12\x18\n\x14\x44ynamicRange_010wuhg\x10\x01\x12\x19\n\x15SequentialFft_010dbgc\x10\x02\x12\x0b\n\x06nmiqud\x10\xf4\x03*c\n\x1eRFmxSpecAnMXAcpMeasurementMode\x12\x13\n\x0fMeasure_010zrmc\x10\x00\x12\x1f\n\x1b\x43\x61librateNoiseFloor_010pztq\x10\x01\x12\x0b\n\x06zsqrsu\x10\xf4\x03*`\n,RFmxSpecAnMXAcpNoiseCalibrationAveragingAuto\x12\x11\n\rFalse_010dseh\x10\x00\x12\x10\n\x0cTrue_010xwwv\x10\x01\x12\x0b\n\x06\x64hmzuy\x10\xf4\x03*X\n#RFmxSpecAnMXAcpNoiseCalibrationMode\x12\x12\n\x0eManual_010nnpr\x10\x00\x12\x10\n\x0c\x41uto_010ydqv\x10\x01\x12\x0b\n\x06vxuryf\x10\xf4\x03*[\n\'RFmxSpecAnMXAcpNoiseCompensationEnabled\x12\x11\n\rFalse_010vopl\x10\x00\x12\x10\n\x0cTrue_010jlzu\x10\x01\x12\x0b\n\x06hbtyhd\x10\xf4\x03*q\n$RFmxSpecAnMXAcpNoiseCompensationType\x12\"\n\x1e\x41nalyzerAndTermination_010ofpp\x10\x00\x12\x18\n\x14\x41nalyzerOnly_010fudl\x10\x01\x12\x0b\n\x06\x64ztpdi\x10\xf4\x03*R\n\x19RFmxSpecAnMXAcpPowerUnits\x12\x0f\n\x0b\x64\x42m_010xgnf\x10\x00\x12\x17\n\x13\x64\x42mPerHertz_010yrao\x10\x01\x12\x0b\n\x06rbqizs\x10\xf4\x03*S\n\x1fRFmxSpecAnMXAcpRbwAutoBandwidth\x12\x11\n\rFalse_010fnxz\x10\x00\x12\x10\n\x0cTrue_010vngp\x10\x01\x12\x0b\n\x06heldbj\x10\xf4\x03*\x87\x01\n+RFmxSpecAnMXAcpRbwFilterBandwidthDefinition\x12\"\n\x1e\x42\x61ndwidthDefinition3dB_010lqru\x10\x00\x12\'\n#BandwidthDefinitionBinWidth_010irxb\x10\x02\x12\x0b\n\x06onaqda\x10\xf4\x03*i\n\x1cRFmxSpecAnMXAcpRbwFilterType\x12\x14\n\x10\x46\x66tBased_010oozx\x10\x00\x12\x14\n\x10Gaussian_010vkgp\x10\x01\x12\x10\n\x0c\x46lat_010btuq\x10\x02\x12\x0b\n\x06\x62hyiuu\x10\xf4\x03*P\n\x1cRFmxSpecAnMXAcpSweepTimeAuto\x12\x11\n\rFalse_010pqdb\x10\x00\x12\x10\n\x0cTrue_010jvzi\x10\x01\x12\x0b\n\x06vezkye\x10\xf4\x03\x42\x12\xaa\x02\x0fOranAptRuClientb\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'RfmxSpecAnAcp_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\252\002\017OranAptRuClient'
  _RFMXSPECANMXACPAMPLITUDECORRECTIONTYPE._serialized_start=2445
  _RFMXSPECANMXACPAMPLITUDECORRECTIONTYPE._serialized_end=2563
  _RFMXSPECANMXACPAVERAGINGENABLED._serialized_start=2565
  _RFMXSPECANMXACPAVERAGINGENABLED._serialized_end=2648
  _RFMXSPECANMXACPAVERAGINGTYPE._serialized_start=2651
  _RFMXSPECANMXACPAVERAGINGTYPE._serialized_end=2790
  _RFMXSPECANMXACPFFTOVERLAPMODE._serialized_start=2792
  _RFMXSPECANMXACPFFTOVERLAPMODE._serialized_end=2906
  _RFMXSPECANMXACPFFTWINDOW._serialized_start=2909
  _RFMXSPECANMXACPFFTWINDOW._serialized_end=3127
  _RFMXSPECANMXACPIFOUTPUTPOWEROFFSETAUTO._serialized_start=3129
  _RFMXSPECANMXACPIFOUTPUTPOWEROFFSETAUTO._serialized_end=3219
  _RFMXSPECANMXACPMEASUREMENTMETHOD._serialized_start=3221
  _RFMXSPECANMXACPMEASUREMENTMETHOD._serialized_end=3341
  _RFMXSPECANMXACPMEASUREMENTMODE._serialized_start=3343
  _RFMXSPECANMXACPMEASUREMENTMODE._serialized_end=3442
  _RFMXSPECANMXACPNOISECALIBRATIONAVERAGINGAUTO._serialized_start=3444
  _RFMXSPECANMXACPNOISECALIBRATIONAVERAGINGAUTO._serialized_end=3540
  _RFMXSPECANMXACPNOISECALIBRATIONMODE._serialized_start=3542
  _RFMXSPECANMXACPNOISECALIBRATIONMODE._serialized_end=3630
  _RFMXSPECANMXACPNOISECOMPENSATIONENABLED._serialized_start=3632
  _RFMXSPECANMXACPNOISECOMPENSATIONENABLED._serialized_end=3723
  _RFMXSPECANMXACPNOISECOMPENSATIONTYPE._serialized_start=3725
  _RFMXSPECANMXACPNOISECOMPENSATIONTYPE._serialized_end=3838
  _RFMXSPECANMXACPPOWERUNITS._serialized_start=3840
  _RFMXSPECANMXACPPOWERUNITS._serialized_end=3922
  _RFMXSPECANMXACPRBWAUTOBANDWIDTH._serialized_start=3924
  _RFMXSPECANMXACPRBWAUTOBANDWIDTH._serialized_end=4007
  _RFMXSPECANMXACPRBWFILTERBANDWIDTHDEFINITION._serialized_start=4010
  _RFMXSPECANMXACPRBWFILTERBANDWIDTHDEFINITION._serialized_end=4145
  _RFMXSPECANMXACPRBWFILTERTYPE._serialized_start=4147
  _RFMXSPECANMXACPRBWFILTERTYPE._serialized_end=4252
  _RFMXSPECANMXACPSWEEPTIMEAUTO._serialized_start=4254
  _RFMXSPECANMXACPSWEEPTIMEAUTO._serialized_end=4334
  _SPECANACP._serialized_start=134
  _SPECANACP._serialized_end=2443
# @@protoc_insertion_point(module_scope)
