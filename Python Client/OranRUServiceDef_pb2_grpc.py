# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import OranRUServiceDef_pb2 as OranRUServiceDef__pb2
import Playback_pb2 as Playback__pb2
import RfmxNrResults_pb2 as RfmxNrResults__pb2
import RfmxNr_pb2 as RfmxNr__pb2
import RfmxPolicy_pb2 as RfmxPolicy__pb2
import RfsgNr_pb2 as RfsgNr__pb2


class OranRuStub(object):
    """The rfmxnr service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConfigureRfmxNr = channel.unary_unary(
                '/multi_site_instr.OranRu/ConfigureRfmxNr',
                request_serializer=RfmxNr__pb2.Nr.SerializeToString,
                response_deserializer=OranRUServiceDef__pb2.RfmxNrReply.FromString,
                )
        self.ConfigureAsyncRfmxNr = channel.unary_unary(
                '/multi_site_instr.OranRu/ConfigureAsyncRfmxNr',
                request_serializer=RfmxNr__pb2.Nr.SerializeToString,
                response_deserializer=OranRUServiceDef__pb2.RfmxNrReply.FromString,
                )
        self.InitiateRfmxNr = channel.unary_unary(
                '/multi_site_instr.OranRu/InitiateRfmxNr',
                request_serializer=RfmxPolicy__pb2.Policy.SerializeToString,
                response_deserializer=OranRUServiceDef__pb2.RfmxNrReply.FromString,
                )
        self.LaunchRfmxNr = channel.unary_unary(
                '/multi_site_instr.OranRu/LaunchRfmxNr',
                request_serializer=RfmxNr__pb2.Nr.SerializeToString,
                response_deserializer=OranRUServiceDef__pb2.RfmxNrReply.FromString,
                )
        self.RequestRfmxNrResults = channel.unary_unary(
                '/multi_site_instr.OranRu/RequestRfmxNrResults',
                request_serializer=RfmxNrResults__pb2.NrResults.SerializeToString,
                response_deserializer=RfmxNrResults__pb2.NrResults.FromString,
                )
        self.InitiateRfsg = channel.unary_unary(
                '/multi_site_instr.OranRu/InitiateRfsg',
                request_serializer=RfsgNr__pb2.RfsgNr.SerializeToString,
                response_deserializer=OranRUServiceDef__pb2.RfsgNrReply.FromString,
                )
        self.AbortRfsg = channel.unary_unary(
                '/multi_site_instr.OranRu/AbortRfsg',
                request_serializer=OranRUServiceDef__pb2.RfsgNrReply.SerializeToString,
                response_deserializer=OranRUServiceDef__pb2.RfsgNrReply.FromString,
                )
        self.ReconfigForPlayback = channel.unary_unary(
                '/multi_site_instr.OranRu/ReconfigForPlayback',
                request_serializer=Playback__pb2.Playback.SerializeToString,
                response_deserializer=OranRUServiceDef__pb2.RfmxNrReply.FromString,
                )
        self.StartRuTransmission = channel.unary_unary(
                '/multi_site_instr.OranRu/StartRuTransmission',
                request_serializer=OranRUServiceDef__pb2.Nothing.SerializeToString,
                response_deserializer=OranRUServiceDef__pb2.RfmxNrReply.FromString,
                )
        self.StopRuTransmission = channel.unary_unary(
                '/multi_site_instr.OranRu/StopRuTransmission',
                request_serializer=OranRUServiceDef__pb2.Nothing.SerializeToString,
                response_deserializer=OranRUServiceDef__pb2.RfmxNrReply.FromString,
                )


class OranRuServicer(object):
    """The rfmxnr service definition
    """

    def ConfigureRfmxNr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureAsyncRfmxNr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitiateRfmxNr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LaunchRfmxNr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestRfmxNrResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitiateRfsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortRfsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReconfigForPlayback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartRuTransmission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopRuTransmission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OranRuServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConfigureRfmxNr': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureRfmxNr,
                    request_deserializer=RfmxNr__pb2.Nr.FromString,
                    response_serializer=OranRUServiceDef__pb2.RfmxNrReply.SerializeToString,
            ),
            'ConfigureAsyncRfmxNr': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureAsyncRfmxNr,
                    request_deserializer=RfmxNr__pb2.Nr.FromString,
                    response_serializer=OranRUServiceDef__pb2.RfmxNrReply.SerializeToString,
            ),
            'InitiateRfmxNr': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiateRfmxNr,
                    request_deserializer=RfmxPolicy__pb2.Policy.FromString,
                    response_serializer=OranRUServiceDef__pb2.RfmxNrReply.SerializeToString,
            ),
            'LaunchRfmxNr': grpc.unary_unary_rpc_method_handler(
                    servicer.LaunchRfmxNr,
                    request_deserializer=RfmxNr__pb2.Nr.FromString,
                    response_serializer=OranRUServiceDef__pb2.RfmxNrReply.SerializeToString,
            ),
            'RequestRfmxNrResults': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestRfmxNrResults,
                    request_deserializer=RfmxNrResults__pb2.NrResults.FromString,
                    response_serializer=RfmxNrResults__pb2.NrResults.SerializeToString,
            ),
            'InitiateRfsg': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiateRfsg,
                    request_deserializer=RfsgNr__pb2.RfsgNr.FromString,
                    response_serializer=OranRUServiceDef__pb2.RfsgNrReply.SerializeToString,
            ),
            'AbortRfsg': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortRfsg,
                    request_deserializer=OranRUServiceDef__pb2.RfsgNrReply.FromString,
                    response_serializer=OranRUServiceDef__pb2.RfsgNrReply.SerializeToString,
            ),
            'ReconfigForPlayback': grpc.unary_unary_rpc_method_handler(
                    servicer.ReconfigForPlayback,
                    request_deserializer=Playback__pb2.Playback.FromString,
                    response_serializer=OranRUServiceDef__pb2.RfmxNrReply.SerializeToString,
            ),
            'StartRuTransmission': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRuTransmission,
                    request_deserializer=OranRUServiceDef__pb2.Nothing.FromString,
                    response_serializer=OranRUServiceDef__pb2.RfmxNrReply.SerializeToString,
            ),
            'StopRuTransmission': grpc.unary_unary_rpc_method_handler(
                    servicer.StopRuTransmission,
                    request_deserializer=OranRUServiceDef__pb2.Nothing.FromString,
                    response_serializer=OranRUServiceDef__pb2.RfmxNrReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'multi_site_instr.OranRu', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OranRu(object):
    """The rfmxnr service definition
    """

    @staticmethod
    def ConfigureRfmxNr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multi_site_instr.OranRu/ConfigureRfmxNr',
            RfmxNr__pb2.Nr.SerializeToString,
            OranRUServiceDef__pb2.RfmxNrReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureAsyncRfmxNr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multi_site_instr.OranRu/ConfigureAsyncRfmxNr',
            RfmxNr__pb2.Nr.SerializeToString,
            OranRUServiceDef__pb2.RfmxNrReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitiateRfmxNr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multi_site_instr.OranRu/InitiateRfmxNr',
            RfmxPolicy__pb2.Policy.SerializeToString,
            OranRUServiceDef__pb2.RfmxNrReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LaunchRfmxNr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multi_site_instr.OranRu/LaunchRfmxNr',
            RfmxNr__pb2.Nr.SerializeToString,
            OranRUServiceDef__pb2.RfmxNrReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestRfmxNrResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multi_site_instr.OranRu/RequestRfmxNrResults',
            RfmxNrResults__pb2.NrResults.SerializeToString,
            RfmxNrResults__pb2.NrResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitiateRfsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multi_site_instr.OranRu/InitiateRfsg',
            RfsgNr__pb2.RfsgNr.SerializeToString,
            OranRUServiceDef__pb2.RfsgNrReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortRfsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multi_site_instr.OranRu/AbortRfsg',
            OranRUServiceDef__pb2.RfsgNrReply.SerializeToString,
            OranRUServiceDef__pb2.RfsgNrReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReconfigForPlayback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multi_site_instr.OranRu/ReconfigForPlayback',
            Playback__pb2.Playback.SerializeToString,
            OranRUServiceDef__pb2.RfmxNrReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartRuTransmission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multi_site_instr.OranRu/StartRuTransmission',
            OranRUServiceDef__pb2.Nothing.SerializeToString,
            OranRUServiceDef__pb2.RfmxNrReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopRuTransmission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/multi_site_instr.OranRu/StopRuTransmission',
            OranRUServiceDef__pb2.Nothing.SerializeToString,
            OranRUServiceDef__pb2.RfmxNrReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
